"use strict";
var express = require('express');
var Book = require('../model/book');
var BooksModel = require('../model/books');
var Books = (function () {
    function Books() {
        this.bookList = new BooksModel.Books([
            new Book.Book(1, 'In Search of Lost Time', 'Marcel Proust', 1913),
            new Book.Book(2, 'Ulysses', 'James Joyce', 1904),
            new Book.Book(3, 'Moby Dick', 'Herman Melville', 1851),
            new Book.Book(4, 'Nineteen Eighty Four', 'George Orwell', 1949)
        ]);
    }
    Books.routes = function () {
        var router = express.Router();
        var booksRoute = new Books();
        router.get('/books/', booksRoute.index.bind(booksRoute));
        router.post('/books/', booksRoute.create.bind(booksRoute));
        router.put('/books/:book_id', booksRoute.update.bind(booksRoute));
        router.delete('/books/:book_id', booksRoute.delete.bind(booksRoute));
        router.get('/books/:book', booksRoute.find.bind(booksRoute));
        router.post('/books/delete/:book_id', booksRoute.delete.bind(booksRoute));
        router.post('/books/update/:book_id', booksRoute.update.bind(booksRoute));
        return router;
    };
    Books.prototype.index = function (request, response) {
        response.json(this.bookList.list());
    };
    Books.prototype.create = function (request, response) {
        var bookTitle = request.body.book_title;
        var bookAuthor = request.body.book_author;
        var bookPublicationDate = request.body.book_pdate;
        if (!bookTitle) {
            response.status(500).send('Book title not found');
            return;
        }
        if (!bookAuthor) {
            response.status(500).send('Book author not found');
            return;
        }
        if (!bookPublicationDate) {
            response.status(500).send('Book publication date not found');
            return;
        }
        response.json(this.bookList.add(bookTitle, bookAuthor, bookPublicationDate));
    };
    Books.prototype.update = function (request, response) {
        var bookId = parseInt(request.params.book_id);
        var book = this.bookList.fetch(bookId);
        var bookTitle = request.body.book_title;
        var bookAuthor = request.body.book_author;
        var bookPublicationDate = request.body.book_pdate;
        if (!book) {
            response.status(404).send('Book not found');
            return;
        }
        if (bookTitle !== undefined) {
            book.setTitle(bookTitle);
        }
        if (bookAuthor !== undefined) {
            book.setAuthor(bookAuthor);
        }
        if (bookPublicationDate !== undefined) {
            book.setPublicationDate(bookPublicationDate);
        }
        response.json(book);
    };
    Books.prototype.delete = function (request, response) {
        var bookId = parseInt(request.params.book_id);
        var wasDeleted = this.bookList.delete(bookId);
        if (!wasDeleted) {
            response.status(404).send('Book not found');
            return;
        }
        else {
            response.json({ success: true });
        }
    };
    Books.prototype.find = function (request, response) {
        var bookQuery = request.params.book;
        var book = this.bookList.find(bookQuery);
        if (!book) {
            response.status(404).send('Book not found');
            return;
        }
        response.json(book);
    };
    return Books;
}());
exports.Books = Books;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
